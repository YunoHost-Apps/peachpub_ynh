#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url="/"
is_public=$YNH_APP_ARG_IS_PUBLIC
#ssb_admin_id=$YNH_APP_ARG_SSB_ADMIN_ID
password=$YNH_APP_ARG_PASSWORD
architecture=$YNH_ARCH
app=$YNH_APP_INSTANCE_NAME
peach_web_service=$app-peach-web
go_sbot_service=$app-go-sbot

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --time --weight=1

final_path=/opt/yunohost/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --time --weight=1

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url
ynh_app_setting_set --app=$app --key=peach_web_service --value=$peach_web_service
ynh_app_setting_set --app=$app --key=go_sbot_service --value=$go_sbot_service
#ynh_app_setting_set --app=$app --key=ssb_admin_id --value=$ssb_admin_id

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Finding an available port..." --time --weight=1

# Find an available port
port=$(ynh_find_port --port=8095)
ynh_app_setting_set --app=$app --key=port --value=$port

# Find an available port for ssb connection
ssbport=$(ynh_find_port --port=8008)
ynh_app_setting_set --app=$app --key=ssbport --value=$ssbport

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --time --weight=1

### `ynh_install_app_dependencies` allows you to add any "apt" dependencies to the package.
### Those deb packages will be installed as dependencies of this package.
### If you're not using this helper:
###		- Remove the section "REMOVE DEPENDENCIES" in the remove script
###		- Remove the variable "pkg_dependencies" in _common.sh
###		- As well as the section "REINSTALL DEPENDENCIES" in the restore script
###		- And the section "UPGRADE DEPENDENCIES" in the upgrade script

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --time --weight=1

# Create a system user
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=1

ynh_app_setting_set --app=$app --key=final_path --value=$final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$final_path" --source_id="$architecture"

# permissions
chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --time --weight=1

### `ynh_add_nginx_config` will use the file conf/nginx.conf

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# CREATE DATA DIRECTORY FOR PEACHCLOUD CONFIG AND GOSBOT DATA
#=================================================
ynh_script_progression --message="Creating a data directory..."  --weight=1

datadir=/home/yunohost.app/$app
ynh_app_setting_set --app=$app --key=datadir --value=$datadir

mkdir -p $datadir
mkdir -p $datadir/config
mkdir -p $datadir/.ssb-go

# permissions
chmod 750 "$datadir"
chmod -R o-rwx "$datadir"
chown -R $app:www-data "$datadir"

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding a configuration file for go-sbot" --time --weight=1

ynh_add_config --template="config.toml" --destination="$datadir/.ssb-go/config.toml"
chmod 600 "$datadir/.ssb-go/config.toml"
chown $app:$app "$datadir/.ssb-go/config.toml"

mkdir -p /etc/sudoers.d/
ynh_add_config --template="sudoers" --destination="/etc/sudoers.d/$app"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..."  --weight=1

# Create a dedicated systemd config
ynh_script_progression --message="peach_web_service: ${peach_web_service}" --time --weight=1
ynh_script_progression --message="go_sbot_service: ${go_sbot_service}" --time --weight=1

ynh_add_systemd_config -t peach-web.service -s $peach_web_service
ynh_add_systemd_config -t go-sbot.service -s $go_sbot_service


# for yunohost version < 4.2, this is a workaround to replace string variables
ynh_script_progression --message="String replacing systemd service"  --weight=1
systemd_file="/etc/systemd/system/$peach_web_service.service"
ynh_replace_string --match_string=__DATADIR__ --replace_string=$datadir --target_file=$systemd_file
ynh_replace_string --match_string=__FINALPATH__ --replace_string=$final_path --target_file=$systemd_file
ynh_replace_string --match_string=__PORT__ --replace_string=$port --target_file=$systemd_file
ynh_replace_string --match_string=__DOMAIN__ --replace_string=$domain --target_file=$systemd_file
ynh_replace_string --match_string=__SSBPORT__ --replace_string=$ssbport --target_file=$systemd_file
systemd_file="/etc/systemd/system/$go_sbot_service.service"
ynh_replace_string --match_string=__DATADIR__ --replace_string=$datadir --target_file=$systemd_file
ynh_replace_string --match_string=__FINALPATH__ --replace_string=$final_path --target_file=$systemd_file
ynh_replace_string --match_string=__PORT__ --replace_string=$port --target_file=$systemd_file
ynh_replace_string --match_string=__DOMAIN__ --replace_string=$domain --target_file=$systemd_file
ynh_replace_string --match_string=__SSBPORT__ --replace_string=$ssbport --target_file=$systemd_file
systemctl daemon-reload

#=================================================
# OPEN SSBPORT
#=================================================
# Open the ssbport to the public
ynh_script_progression --message="Configuring firewall..."  --weight=1
ynh_exec_warn_less yunohost firewall allow --no-upnp TCP $ssbport

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..." --time --weight=1

### `ynh_use_logrotate` is used to configure a logrotate configuration for the logs of this app.
### Use this helper only if there is effectively a log file for this app.
### If you're not using this helper:
###		- Remove the section "BACKUP LOGROTATE" in the backup script
###		- Remove also the section "REMOVE LOGROTATE CONFIGURATION" in the remove script
###		- As well as the section "RESTORE THE LOGROTATE CONFIGURATION" in the restore script
###		- And the section "SETUP LOGROTATE" in the upgrade script

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

# touch logfile so it exists
touch /var/log/$app/$app.log

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost with ssbport $ssbport..." --time --weight=1

### `yunohost service add` integrates a service in YunoHost. It then gets
### displayed in the admin interface and through the others `yunohost service` commands.
### (N.B.: this line only makes sense if the app adds a service to the system!)
### If you're not using these lines:
###		- You can remove these files in conf/.
###		- Remove the section "REMOVE SERVICE INTEGRATION IN YUNOHOST" in the remove script
###		- As well as the section "INTEGRATE SERVICE IN YUNOHOST" in the restore script
###		- And the section "INTEGRATE SERVICE IN YUNOHOST" in the upgrade script

yunohost service add $go_sbot_service --description="$description" --log="/var/log/$app/$app.log"  --needs_exposed_ports $ssbport
yunohost service add $peach_web_service --description="$description" --log="/var/log/$app/$app.log"  --needs_exposed_ports $ssbport

### Additional options starting with 3.8:
###
### --needs_exposed_ports "$port" a list of ports that needs to be publicly exposed
###                               which will then be checked by YunoHost's diagnosis system
###                               (N.B. DO NOT USE THIS is the port is only internal!!!)
###
### --test_status "some command"  a custom command to check the status of the service
###                               (only relevant if 'systemctl status' doesn't do a good job)
###
### --test_conf "some command"    some command similar to "nginx -t" that validates the conf of the service
###
### Re-calling 'yunohost service add' during the upgrade script is the right way
### to proceed if you later realize that you need to enable some flags that
### weren't enabled on old installs (be careful it'll override the existing
### service though so you should re-provide all relevant flags when doing so)

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --time --weight=1

start_systemd_services $app

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring permissions..."  --weight=1

# for normal operation of the app, is_public should equal True,
# and all visitors should be able to access the /admin section, with or without SSO
# as peachpub has its own authentication and user-system
# which operates outside of yunohost SSO

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# Everyone can access the app.
	# The "main" permission is automatically created before the install script.
	ynh_permission_update --permission="main" --add="visitors"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --time --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --time --last
